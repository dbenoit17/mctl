#!/bin/bash

# This script parses C source files
# for functions matching the following
# signature, and prints a test driver to
# stdout.
TEST_CTAG_REGEX='^Test.*(TestingT *\S+) {'

set -e

test_funcs () {
  ctags -x $@ | grep -E "${TEST_CTAG_REGEX}" | awk '{print $1}'
}

print_func_symbols () {
  local symbols=$(test_funcs $@)
  for sym in ${symbols}; do
    printf "%s," ${sym}
  done
}

print_func_decls () {
  local symbols=$(test_funcs $@)
  for sym in ${symbols}; do
    printf "void %s(TestingT *t);" ${sym}
  done
}

print_func_strings () {
  local symbols=$(test_funcs $@)
  for sym in ${symbols}; do
    printf "\"%s\"," ${sym}
  done
}

cat << EOF
// DO NOT EDIT
// Test driver generated by ${0}.

#ifdef _MCTL_MODE_TEST
#include "testing.h"
#include <stdio.h>

const char test_suite[] = "$(basename $PWD)";

$(print_func_decls $@)

const char* test_names[] = {
  $(print_func_strings $@)
};

const UnitTest tests[] = {
  $(print_func_symbols $@)
};

int main(int argc, char* argv[]) {
  int test_count = sizeof(tests) / sizeof(UnitTest);
  int failed = 0;
  fprintf(stderr, "#### Test Suite: %s\n", test_suite);
  for (int i = 0; i < test_count; i++) {
    TestingT t = PASS;
    tests[i](&t);
    if (t == PASS) {
      fprintf(stderr, "PASS: %s\n", test_names[i]);
    } else {
      fprintf(stderr, "FAIL: %s\n", test_names[i]);
      failed = 1;
    }
  }
  if (failed) {
    fprintf(stderr, "\nFAIL\n");
  }  else {
    fprintf(stderr, "\nPASS\n");
  }
  return failed;
}
#endif
EOF
